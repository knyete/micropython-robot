https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html

sudo python3 esptool.py --port /dev/ttyUSB0 erase_flash

sudo python3 esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash --flash_size=detect 0 esp8266-20171101-v1.9.3.bin

sudo picocom /dev/ttyUSB0 -b115200


import webrepl_setup


-- manual setup WiFi connection
https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_basics.html

import network
sta_if = network.WLAN(network.STA_IF)
# ap_if = network.WLAN(network.AP_IF)  # ap_if is for AccessPoint mode

sta_if.active()  # You can check if the interfaces are active
#  False
#  ap_if.active()
#  True
# ap_if.ifconfig()  # check the network settings of the AP interface
#('192.168.4.1', '255.255.255.0', '192.168.4.1', '8.8.8.8')  # The returned values: IP address, netmask, gateway, DNS

sta_if.active(True)  # activate the station interface

sta_if.connect('<your ESSID>', '<your password>') connect to your WiFi network

# sta_if.connect('<t4mD>', '<>')

sta_if.isconnected()  # To check if the connection is established use



--

wifi:
MicroPython-0121e6
(MicroPython-xxyyy), yyy = 1e6

pass:
micropythoN

WebREPL
pass: 12345
12345  (developer temp pass)

http://micropython.org/webrepl/
ws://192.168.4.1:8266/

or

file:///home/arkadii/Documents/micropython/inst/webrepl-master/webrepl.html

--
import network
sta_if = network.WLAN(network.STA_IF)
ap_if = network.WLAN(network.AP_IF)

You can check if the interfaces are active by:

>>> sta_if.active()
False
>>> ap_if.active()
True

You can also check the network settings of the interface by:

>>> ap_if.ifconfig()
('192.168.4.1', '255.255.255.0', '192.168.4.1', '8.8.8.8')

The returned values are: IP address, netmask, gateway, DNS.
4.1. Configuration of the WiFi

Upon a fresh install the ESP8266 is configured in access point mode, so the AP_IF interface is active and the STA_IF interface is inactive. You can configure the module to connect to your own network using the STA_IF interface.

First activate the station interface:

>>> sta_if.active(True)


--


sta_if.connect('<your ESSID>', '<your password>')
sta_if.connect('KVN', 'cccccccc')

----
import machine
machine.reset()

>>> machine.
__name__        mem8            mem16           mem32
freq            reset           reset_cause     unique_id
idle            sleep           deepsleep       disable_irq
enable_irq      time_pulse_us   RTC             Timer
WDT             Pin             Signal          PWM
ADC             UART            I2C             SPI
DEEPSLEEP       PWRON_RESET     HARD_RESET      DEEPSLEEP_RESET
WDT_RESET       SOFT_RESET

--

>>> import os
>>> os.
__name__        uname           urandom         dupterm
dupterm_notify  VfsFat          ilistdir        listdir
mkdir           rmdir           chdir           getcwd
remove          rename          stat            statvfs
mount           umount

----

----
import socket 
import machine


#HTML to send to browsers
html = """<!DOCTYPE html>
<html>
<head> <title>ESP8266 LED ON/OFF</title> </head>
<center><h2>A simple webserver for turning HUZZAH Feather LED's on and off with Micropython</h2></center>
<center><h3>(for noobs to both the ESP8266 and Micropython)</h3></center>
<form>
LED0: 
<button name="LED" value="ON0" type="submit">LED ON</button>
<button name="LED" value="OFF0" type="submit">LED OFF</button><br><br>
LED2: 
<button name="LED" value="ON2" type="submit">LED ON</button>
<button name="LED" value="OFF2" type="submit">LED OFF</button>
</form>
</html>
"""

#Setup PINS
LED0 = machine.Pin(0, machine.Pin.OUT)
LED2 = machine.Pin(2, machine.Pin.OUT)

#Setup Socket WebServer
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', 80))
s.listen(5)
while True:
    conn, addr = s.accept()
    print("Got a connection from %s" % str(addr))
    request = conn.recv(1024)
    print("Content = %s" % str(request))
    request = str(request)
    LEDON0 = request.find('/?LED=ON0')
    LEDOFF0 = request.find('/?LED=OFF0')
    LEDON2 = request.find('/?LED=ON2')
    LEDOFF2 = request.find('/?LED=OFF2')
    #print("Data: " + str(LEDON0))
    #print("Data2: " + str(LEDOFF0))
    if LEDON0 == 6:
        print('TURN LED0 ON')
        LED0.low()
    if LEDOFF0 == 6:
        print('TURN LED0 OFF')
        LED0.high()
    if LEDON2 == 6:
        print('TURN LED2 ON')
        LED2.low()
    if LEDOFF2 == 6:
        print('TURN LED2 OFF')
        LED2.high()
    response = html
    conn.send(response)
    conn.close()
----

https://learn.adafruit.com/16-channel-pwm-servo-driver?view=all

>>> import machine
>>> from machine import Pin, PWM, I2C
>>> i2c = machine.I2C(scl=machine.Pin(12), sda=machine.Pin(13), freq=400000)
>>> i2c.scan()
[64, 112]

----
links:
http://micropython-on-esp8266-workshop.readthedocs.io/en/latest/basics.html
----
4 servo + 1 DC (via H bridge)

import machine
import time
def testservos():
    serv12 = machine.PWM(machine.Pin(12), freq=50)
    serv13 = machine.PWM(machine.Pin(13), freq=50)
    serv14 = machine.PWM(machine.Pin(14), freq=50)
    serv15 = machine.PWM(machine.Pin(15), freq=50)
    motor_a_p = machine.PWM(machine.Pin(5), freq=50)
    motor_a_m = machine.PWM(machine.Pin(0), freq=50)
    time.sleep_ms(2000)
    serv12.duty(60)
    serv13.duty(60)
    serv14.duty(60)
    serv15.duty(60)
    time.sleep_ms(2000)
    serv12.duty(100)
    serv13.duty(100)
    serv14.duty(100)
    serv15.duty(100)

--
import machine
import time
serv12 = machine.PWM(machine.Pin(12), freq=50)
serv13 = machine.PWM(machine.Pin(13), freq=50)
serv14 = machine.PWM(machine.Pin(14), freq=50)
serv15 = machine.PWM(machine.Pin(15), freq=50)
motor_a_p = machine.PWM(machine.Pin(5), freq=50)
motor_a_m = machine.PWM(machine.Pin(0), freq=50)
serv12.duty(60)
serv13.duty(60)
serv14.duty(60)
serv15.duty(60)

serv12.duty(100)
serv13.duty(100)
serv14.duty(100)
serv15.duty(100)

#

motor_a_p.duty(1000)
motor_a_m.duty(1)
print('Go "Forward"')

motor_a_p.duty(2000)
motor_a_m.duty(1)
print('Go "Fast Forward"')

motor_a_p.duty(1000)
motor_a_m.duty(-1)
print('Go "Backward"')

motor_a_p.duty(0)
motor_a_m.duty(1)
print('Go "STOP"')

----
Hobby servo motors can be controlled using PWM.
They require a frequency of 50Hz and then a
duty between about 40 and 115,
with 77 being the centre value

----
192.168.88.186
http://192.168.88.186/?headx=0.37
http://192.168.4.1/?headx=0.37

----
>>> import ure
>>> rh = re.compile("headx=0\.(\d+)")

>>> print('not') if None != rh.search(s) else print('yes')
not
>>> print('not') if None != rh.search(not_s) else print('yes')
yes

>>> s
'http://192.168.101.102/?headx=0.5'
>>> not_s
'http://192.168.101.102/?handy=0.5'
>>> rh
<re 3fff0af0>
>>>

----
config template

ssid = 'KVN'
ssidpss = 'cccccccc'

write to:
{'ssid':'KVN','ssidpss':'cccccccc','trick':'demo'}

--
>>> f = open('config.txt', 'w')
>>> f.write("{'ssid':'KVN','ssidpss':'cccccccc','trick':'demo'}")

>>> string = '{"ssid":"KVN","ssidpss":"cccccccc","trick":"demo"}'
>>> parced = json.loads(string)
>>> parced
{'ssid': 'KVN', 'ssidpss': 'cccccccc', 'trick': 'demo'}
>>> type(parced)
<class 'dict'>
>>> print(parced['ssid'])
KVN
>>> print(parced['ssidpss'])
cccccccc
>>> print(parced['trick'])
demo
>>> # ok


>>> f = open('config.txt', 'w')
>>> f.write('{"ssid":"KVN","ssidpss":"cccccccc","trick":"demo"}')
53
>>> f.close()
>>> file = open('config.txt')
>>> text = file.read()
>>> text
'{"ssid":"KVN","ssidpss":"cccccccc","trick":"demo"}'
>>> parced = ujson.loads(text)
>>> parced
{'ssid': 'KVN', 'ssidpss': 'cccccccc', 'trick': 'demo'}
>>> parced['ssid']
'KVN'
>>> 

# ----------

>>> import re
>>> request = "http://192.168.4.1/?nextssid=xx&nextwifipassword=yy&nextrunmode=zz"
>>>
>>> r_nextssid = re.compile("nextssid=(\w+)")
>>>
>>> r_nextssid
re.compile('nextssid=(\\w+)')
>>>
>>> r_nextssid.search(request)
<_sre.SRE_Match object; span=(20, 31), match='nextssid=xx'>
>>>
>>> nextssid = r_nextssid.search(request).groups(0)

>>> nextssid
('xx',)
>>> type(nextssid)
<class 'tuple'>

>>> len(nextssid)
1
>>> nextssid[0]
'xx'
